def binToHexa(n):
    
    # convert binary to int
    num = int(n, 2)
      
    # convert int to hexadecimal
    hex_num = hex(num)
    return(hex_num)

def sbox_bit(x0,x1,x2,x3,x4):
    y0 = (x4 & x1) ^ x3 ^ (x2 & x1) ^ x2 ^ (x1 & x0) ^ x1 ^ x0;     
    y1 = x4 ^ (x3 & x2) ^ (x3 & x1) ^ x3 ^ x2 ^ x1 ^ x0 ^ (x2 & x1);
    y2 = (x4 & x3) ^ x4 ^ x2 ^ x1 ^ 1;           
    y3 = (x4 & x0) ^ (x3 & x0) ^ x4 ^ x3 ^ x2 ^x1 ^ x0;             
    y4 = (x4 & x1) ^ x4 ^ x3 ^ (x1 & x0) ^ x1; 
    
    return [str(y0),str(y1),str(y2),str(y3),str(y4)]

def sbox_ti_1(x0_0,x1_0,x2_0,x3_0,x4_0,x0_1,x1_1,x2_1,x3_1,x4_1,x0_2,x1_2,x2_2,x3_2,x4_2):
    y0_0 = x0_1&x3_0 ^ x0_1&x3_1 ^ x0_1&x3_2 ^ x0_1 ^ x0_2&x3_0 ^ x0_2&x3_1 ^ x0_2&x3_2 ^ x0_2 ^ x1_1 ^ x1_2 ^ x3_0&x4_0 ^ x3_0&x4_1 ^ x3_0&x4_2 ^ x3_0 ^ x3_1&x4_0 ^ x3_1&x4_1 ^ x3_1&x4_2 ^ x3_1 ^ x3_2&x4_0 ^ x3_2&x4_1 ^ x3_2&x4_2 ^ x3_2

    y0_1 = x0_0&x3_0 ^ x0_0&x3_1 ^ x0_0&x3_2 ^ x0_0

    y0_2 = x1_0

    y1_0 = x0_1&x4_0 ^ x0_1&x4_1 ^ x0_1&x4_2 ^ x0_1 ^ x0_2&x4_0 ^ x0_2&x4_1 ^ x0_2&x4_2 ^ x0_2 ^ x1_1&x4_0 ^ x1_1&x4_1 ^ x1_1&x4_2 ^ x1_1 ^ x1_2&x4_0 ^ x1_2&x4_1 ^ x1_2&x4_2 ^ x1_2 ^ x2_1 ^ x2_2 ^ x3_0 ^ x3_1 ^ x3_2 ^ x4_0 ^ x4_1 ^ x4_2

    y1_1 = x0_0&x4_0 ^ x0_0&x4_1 ^ x0_0&x4_2 ^ x0_0 ^ x1_0&x4_0 ^ x1_0&x4_1 ^ x1_0&x4_2 ^ x1_0

    y1_2 = x2_0

    y2_0 = x0_1&x1_1 ^ x0_1&x1_2 ^ x0_1 ^ x0_2&x1_1 ^ x0_2&x1_2 ^ x0_2 ^ x2_1 ^ x2_2 ^ x3_0 ^ x3_1 ^ x3_2 ^ 1

    y2_1 = x0_0&x1_0 ^ x0_0&x1_2 ^ x0_0 ^ x0_2&x1_0 ^ x2_0

    y2_2 = x0_0&x1_1 ^ x0_1&x1_0

    y3_0 = x0_1 ^ x0_2 ^ x1_1&x2_1 ^ x1_1&x2_2 ^ x1_1&x3_0 ^ x1_1&x3_1 ^ x1_1&x3_2 ^ x1_1 ^ x1_2&x2_1 ^ x1_2&x2_2 ^ x1_2&x3_0 ^ x1_2&x3_1 ^ x1_2&x3_2 ^ x1_2 ^ x2_1&x3_0 ^ x2_1&x3_1 ^ x2_1&x3_2 ^ x2_1 ^ x2_2&x3_0 ^ x2_2&x3_1 ^ x2_2&x3_2 ^ x2_2 ^ x3_0 ^ x3_1 ^ x3_2 ^ x4_0 ^ x4_1 ^ x4_2

    y3_1 = x0_0 ^ x1_0&x2_0 ^ x1_0&x2_2 ^ x1_0&x3_0 ^ x1_0&x3_1 ^ x1_0&x3_2 ^ x1_0 ^ x1_2&x2_0 ^ x2_0&x3_0 ^ x2_0&x3_1 ^ x2_0&x3_2 ^ x2_0

    y3_2 = x1_0&x2_1 ^ x1_1&x2_0

    y4_0 = x0_1&x3_0 ^ x0_1&x3_1 ^ x0_1&x3_2 ^ x0_2&x3_0 ^ x0_2&x3_1 ^ x0_2&x3_2 ^ x1_1 ^ x1_2 ^ x2_1&x3_0 ^ x2_1&x3_1 ^ x2_1&x3_2 ^ x2_1 ^ x2_2&x3_0 ^ x2_2&x3_1 ^ x2_2&x3_2 ^ x2_2 ^ x3_0&x4_0 ^ x3_0&x4_1 ^ x3_0&x4_2 ^ x3_0 ^ x3_1&x4_0 ^ x3_1&x4_1 ^ x3_1&x4_2 ^ x3_1 ^ x3_2&x4_0 ^ x3_2&x4_1 ^ x3_2&x4_2 ^ x3_2 ^ x4_0 ^ x4_1 ^ x4_2

    y4_1 = x0_0&x3_0 ^ x0_0&x3_1 ^ x0_0&x3_2 ^ x1_0 ^ x2_0&x3_0 ^ x2_0&x3_1 ^ x2_0&x3_2

    y4_2 = x2_0

    return [str(y0_0 ^ y0_1 ^ y0_2), str(y1_0 ^ y1_1 ^ y1_2), str(y2_0 ^ y2_1 ^ y2_2), str(y3_0 ^ y3_1 ^ y3_2), str(y4_0 ^ y4_1 ^ y4_2)]

def sbox_ti_new(x0_0,x1_0,x2_0,x3_0,x4_0,x0_1,x1_1,x2_1,x3_1,x4_1,x0_2,x1_2,x2_2,x3_2,x4_2):
    y0_0 = x0_0 ^ x0_1 & x1_1 ^ x0_1 & x1_2 ^ x0_1 ^ x1_1 & x2_1 ^ x1_1 & x4_1 ^ x1_1 & x0_2 ^ x1_1 & x2_2 ^ x1_1 & x4_2 ^ x1_1 ^ x2_1 & x1_2 ^ x2_1 ^ x3_1 ^ x4_1 & x1_2 ^ x0_2 & x1_2 ^ x1_2 & x2_2 ^ x1_2 & x4_2 ^ x1_2 ^ x2_2 ^ x3_2 
    y0_1 = x0_0 & x1_0 ^ x0_0 & x1_1 ^ x0_0 & x1_2 ^ x1_0 & x2_0 ^ x1_0 & x4_0 ^ x1_0 & x0_1 ^ x1_0 & x2_1 ^ x1_0 & x4_1 ^ x1_0 & x0_2 ^ x1_0 & x2_2 ^ x1_0 & x4_2 ^ x1_0 ^ x2_0 & x1_1 ^ x2_0 & x1_2 ^ x2_0 ^ x3_0 ^ x4_0 & x1_1 ^ x4_0 & x1_2 
    y0_2 = x0_2  

    y1_0 = x1_0 ^ x0_1 ^ x1_1 & x2_1 ^ x1_1 & x3_1 ^ x1_1 & x2_2 ^ x1_1 & x3_2 ^ x1_1 ^ x2_1 & x3_1 ^ x2_1 & x1_2 ^ x2_1 & x3_2 ^ x2_1 ^ x3_1 & x1_2 ^ x3_1 & x2_2 ^ x3_1 ^ x4_1 ^ x0_2 ^ x1_2 & x2_2 ^ x1_2 & x3_2 ^ x2_2 & x3_2 ^ x2_2 ^ x3_2 ^ x4_2  
    y1_1 = x0_0 ^ x1_0 & x2_0 ^ x1_0 & x3_0 ^ x1_0 & x2_1 ^ x1_0 & x3_1 ^ x1_0 & x2_2 ^ x1_0 & x3_2 ^ x2_0 & x3_0 ^ x2_0 & x1_1 ^ x2_0 & x3_1 ^ x2_0 & x1_2 ^ x2_0 & x3_2 ^ x2_0 ^ x3_0 & x1_1 ^ x3_0 & x2_1 ^ x3_0 & x1_2 ^ x3_0 & x2_2 ^ x3_0 ^ x4_0
    y1_2 = x1_2 

    y2_0 = x2_0 ^ x1_1 ^ x2_1 ^ x3_1 & x4_1 ^ x3_1 & x4_2 ^ x4_1 & x3_2 ^ x4_1 ^ x1_2 ^ x3_2 & x4_2 ^ x4_2 ^ 1 
    y2_1 = x1_0 ^ x3_0 & x4_0 ^ x3_0 & x4_1 ^ x3_0 & x4_2 ^ x4_0 & x3_1 ^ x4_0 & x3_2 ^ x4_0 
    y2_2 = x2_2 

    y3_0 = x3_0 ^ x0_1 & x3_1 ^ x0_1 & x4_1 ^ x0_1 & x3_2 ^ x0_1 & x4_2 ^ x0_1 ^ x1_1 ^ x2_1 ^ x3_1 & x0_2 ^ x3_1 ^ x4_1 & x0_2 ^ x4_1 ^ x0_2 & x3_2 ^ x0_2 & x4_2 ^ x0_2 ^ x1_2 ^ x2_2 ^ x4_2 
    y3_1 = x0_0 & x3_0 ^ x0_0 & x4_0 ^ x0_0 & x3_1 ^ x0_0 & x4_1 ^ x0_0 & x3_2 ^ x0_0 & x4_2 ^ x0_0 ^ x1_0 ^ x2_0 ^ x3_0 & x0_1 ^ x3_0 & x0_2 ^ x4_0 & x0_1 ^ x4_0 & x0_2 ^ x4_0 
    y3_2 = x3_2

    y4_0 = x4_0 ^ x0_1 & x1_1 ^ x0_1 & x1_2 ^ x1_1 & x4_1 ^ x1_1 & x0_2 ^ x1_1 & x4_2 ^ x1_1 ^ x3_1 ^ x4_1 & x1_2 ^ x4_1 ^ x0_2 & x1_2 ^ x1_2 & x4_2 ^ x1_2 ^ x3_2 
    y4_1 = x0_0 & x1_0 ^ x0_0 & x1_1 ^ x0_0 & x1_2 ^ x1_0 & x4_0 ^ x1_0 & x0_1 ^ x1_0 & x4_1 ^ x1_0 & x0_2 ^ x1_0 & x4_2 ^ x1_0 ^ x3_0 ^ x4_0 & x1_1 ^ x4_0 & x1_2
    y4_2 = x4_2

    return [str(y0_0 ^ y0_1 ^ y0_2), str(y1_0 ^ y1_1 ^ y1_2), str(y2_0 ^ y2_1 ^ y2_2), str(y3_0 ^ y3_1 ^ y3_2), str(y4_0 ^ y4_1 ^ y4_2)]


print("Input\t: ", end ='')
for i in range(32):
    z = bin(i)[2:].zfill(5)
    print(binToHexa(z), end = '\t')
print()
print("SBOX_TI\t: ", end = '')
for i in range(32):
    z = bin(i)[2:].zfill(5)
    print(binToHexa(''.join(sbox_ti_new(0,0,0,0,0,0,0,0,0,0,int(z[0]),int(z[1]),int(z[2]),int(z[3]),int(z[4])))), end = '\t')
print()
print("SBOX\t: ", end = '')
for i in range(32):
    z = bin(i)[2:].zfill(5)
    print(binToHexa(''.join(sbox_bit(int(z[0]),int(z[1]),int(z[2]),int(z[3]),int(z[4])))), end = '\t')